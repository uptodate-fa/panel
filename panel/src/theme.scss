@use '@angular/material' as mat;

@include mat.core();

:root,
:host {
  --sys-background: #f5f5f5;
  --sys-on-background: #181c20;
  --sys-surface: #f7f9ff;
  --sys-surface-dim: #d8dae0;
  --sys-surface-bright: #f7f9ff;
  --sys-surface-container-lowest: #ffffff;
  --sys-surface-container-low: #f1f3f9;
  --sys-surface-container: #eceef3;
  --sys-surface-container-high: #e6e8ee;
  --sys-surface-container-highest: #e0e2e8;
  --sys-on-surface: #181c20;
  --sys-surface-variant: #dfe3eb;
  --sys-on-surface-variant: #42474e;
  --sys-inverse-surface: #2d3135;
  --sys-inverse-on-surface: #eff1f6;
  --sys-outline: #73777f;
  --sys-outline-variant: #c2c7cf;
  --sys-shadow: #000000;
  --sys-scrim: #000000;
  --sys-surface-tint: #32628d;
  --sys-primary: #007ac3;
  --sys-on-primary: #ffffff;
  --sys-primary-container: #cfe5ff;
  --sys-on-primary-container: #001d34;
  --sys-inverse-primary: #9dcbfc;
  --sys-secondary: #31628d;
  --sys-on-secondary: #ffffff;
  --sys-secondary-container: #cfe5ff;
  --sys-on-secondary-container: #001d34;
  --sys-tertiary: #85bc20;
  --sys-on-tertiary: #ffffff;
  --sys-tertiary-container: #d0eda0;
  --sys-on-tertiary-container: #121f00;
  --sys-error: #904a43;
  --sys-on-error: #ffffff;
  --sys-error-container: #ffdad5;
  --sys-on-error-container: #3b0907;
  --sys-neutral: #74777c;
  --sys-neutral-variant: #73777f;
  --sys-primary-fixed: #cfe5ff;
  --sys-primary-fixed-dim: #9dcbfc;
  --sys-on-primary-fixed: #001d34;
  --sys-on-primary-fixed-variant: #134a74;
  --sys-secondary-fixed: #cfe5ff;
  --sys-secondary-fixed-dim: #9ccbfb;
  --sys-on-secondary-fixed: #001d34;
  --sys-on-secondary-fixed-variant: #124a73;
  --sys-tertiary-fixed: #d0eda0;
  --sys-tertiary-fixed-dim: #b5d087;
  --sys-on-tertiary-fixed: #121f00;
  --sys-on-tertiary-fixed-variant: #384d13;
  --sys-inverse-secondary: #9ccbfb;
  --sys-inverse-tertiary: #b5d087;
  --sys-inverse-error: #ffb4ab;
  --sys-error-fixed: #ffdad5;
  --sys-error-fixed-dim: #ffb4ab;
  --sys-on-error-fixed: #3b0907;
  --sys-on-error-fixed-variant: #73342d;
}

$theme: mat.define-theme(
  (
    color: (
      theme-type: light,
      use-system-variables: true,
    ),
    typography: (
      use-system-variables: true,
    ),
    density: (
      scale: -1,
    ),
  )
);

@mixin color-tokens($app-theme) {
  .primary-background {
    background-color: mat.get-theme-color($app-theme, primary);
  }
  .primary-text {
    color: mat.get-theme-color($app-theme, primary);
  }
  .on-primary {
    color: mat.get-theme-color($app-theme, on-primary);
  }
  .primary-container {
    background-color: mat.get-theme-color($app-theme, primary-container);
  }
  .on-primary-container {
    color: mat.get-theme-color($app-theme, on-primary-container);
  }
  .primary-fixed {
    background-color: mat.get-theme-color($app-theme, primary-fixed);
  }
  .primary-fixed-dim {
    background-color: mat.get-theme-color($app-theme, primary-fixed-dim);
  }
  .on-primary-fixed {
    color: mat.get-theme-color($app-theme, on-primary-fixed);
  }
  .on-primary-fixed-variant {
    color: mat.get-theme-color($app-theme, on-primary-fixed-variant);
  }
  .secondary-background {
    background-color: mat.get-theme-color($app-theme, secondary);
  }
  .on-secondary {
    color: mat.get-theme-color($app-theme, on-secondary);
  }
  .secondary-container {
    background-color: mat.get-theme-color($app-theme, secondary-container);
  }
  .on-secondary-container {
    color: mat.get-theme-color($app-theme, on-secondary-container);
  }
  .secondary-fixed {
    background-color: mat.get-theme-color($app-theme, secondary-fixed);
  }
  .secondary-fixed-dim {
    background-color: mat.get-theme-color($app-theme, secondary-fixed-dim);
  }
  .on-secondary-fixed {
    color: mat.get-theme-color($app-theme, on-secondary-fixed);
  }
  .on-secondary-fixed-variant {
    color: mat.get-theme-color($app-theme, on-secondary-fixed-variant);
  }
  .tertiary-background {
    background-color: mat.get-theme-color($app-theme, tertiary);
  }
  .on-tertiary {
    color: mat.get-theme-color($app-theme, on-tertiary);
  }
  .tertiary-container {
    background-color: mat.get-theme-color($app-theme, tertiary-container);
  }
  .on-tertiary-container {
    color: mat.get-theme-color($app-theme, on-tertiary-container);
  }
  .tertiary-fixed {
    background-color: mat.get-theme-color($app-theme, tertiary-fixed);
  }
  .tertiary-fixed-dim {
    background-color: mat.get-theme-color($app-theme, tertiary-fixed-dim);
  }
  .on-tertiary-fixed {
    color: mat.get-theme-color($app-theme, on-tertiary-fixed);
  }
  .on-tertiary-fixed-variant {
    color: mat.get-theme-color($app-theme, on-tertiary-fixed-variant);
  }
  .error {
    background-color: mat.get-theme-color($app-theme, error);
  }
  .on-error {
    color: mat.get-theme-color($app-theme, on-error);
  }
  .error-container {
    background-color: mat.get-theme-color($app-theme, error-container);
  }
  .on-error-container {
    color: mat.get-theme-color($app-theme, on-error-container);
  }
  .surface-dim {
    background-color: mat.get-theme-color($app-theme, surface-dim);
  }
  .surface {
    background-color: mat.get-theme-color($app-theme, surface);
  }
  .surface-bright {
    background-color: mat.get-theme-color($app-theme, surface-bright);
  }
  .surface-container-lowest {
    background-color: mat.get-theme-color($app-theme, surface-container-lowest);
  }
  .surface-container-low {
    background-color: mat.get-theme-color($app-theme, surface-container-low);
  }
  .surface-container {
    background-color: mat.get-theme-color($app-theme, surface-container);
  }
  .surface-container-high {
    background-color: mat.get-theme-color($app-theme, surface-container-high);
  }
  .surface-container-highest {
    background-color: mat.get-theme-color(
      $app-theme,
      surface-container-highest
    );
  }
  .on-surface {
    color: mat.get-theme-color($app-theme, on-surface);
  }
  .on-surface-variant {
    color: mat.get-theme-color($app-theme, on-surface-variant);
  }
  .outline {
    background-color: mat.get-theme-color($app-theme, outline);
  }
  .outline-variant {
    background-color: mat.get-theme-color($app-theme, outline-variant);
  }
  .inverse-surface {
    background-color: mat.get-theme-color($app-theme, inverse-surface);
  }
  .inverse-on-surface {
    background-color: mat.get-theme-color($app-theme, inverse-on-surface);
  }
  .inverse-primary {
    background-color: mat.get-theme-color($app-theme, inverse-primary);
  }
  .scrim {
    background-color: mat.get-theme-color($app-theme, scrim);
  }
  .shadow {
    background-color: mat.get-theme-color($app-theme, shadow);
  }
}

html {
  @include mat.all-component-themes($theme);
  @include mat.system-level-colors($theme); // ðŸ‘ˆ Added
  @include mat.system-level-typography($theme); // ðŸ‘ˆ Added
  @include color-tokens($theme);
}
